@page "/houses/create/"

@inject IHouseRepository _repo
@inject NavigationManager _navManager
@inject IFileUpload _fileUpload
@inject IToastService _toastService


<h3 class="card-title">Create New House</h3>
<hr />
<br />
@if (!isSuccess)
{
    <ErrorMessage Message="Something Went Wrong With the Operation" />
}


<EditForm Model="Model" OnValidSubmit="HandleCreate">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="offerType">Offer Type</label>
        <InputSelect @bind-Value="@Model.OfferType">

            @foreach (var offerType in Enum.GetValues(typeof(OfferType)))
            {

                <option value="@offerType">@offerType</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="houseNumber">Address House Number</label>
        <InputText @bind-Value="Model.Address.HouseNumber" class="form-control" id="houseNumber" />

        <label for="postalCode">Address Postal Code</label>
        <InputText @bind-Value="Model.Address.PostalCode" class="form-control" id="postalCode" />

        <label for="street">Address Street</label>
        <InputText @bind-Value="Model.Address.Street" class="form-control" id="street" />
    </div>

    <div class="form-group">
        <label for="imageUrl">House image</label>
        <InputFile OnChange="HandleFileSelection" />
        @if (isInvalidFileType)
        {
            <ErrorMessage Message="Please remove the invalid file type and select as new image, or leave this field blank" />
        }
       @* @if (!string.IsNullOrWhiteSpace(imageDataURL))
        {
            <img src="@imageDataURL" style="height:100px;width:100px" />
        }*@
    </div>
    <button class="btn btn-primary" type="submit">
        <span class="oi oi-pencil"></span>
        Create House
    </button>
    <button @onclick="BackToList" class="btn btn-outline-secondary">
        <span class="oi oi-media-skip-backward"></span>
        Back To List
    </button>
</EditForm>

@code {
    private House Model = new House();
    private IBrowserFile file;
    private bool isSuccess = true;
    private bool isInvalidFileType = false;
    private string imageDataURL;
    private Stream msFile;
    private async Task HandleCreate()
    {
        if (file != null)
        {
            var ext = Path.GetExtension(file.Name);
            var picId = Guid.NewGuid().ToString().Replace("-", "");
            var picName = $"{picId}{ext}";

            await _fileUpload.UploadFile(msFile, picName);

            Model.ImageUrl = picName;
        }

        isSuccess = await _repo.Create(Endpoints.HousesEndpoint, Model);
        if (isSuccess)
        {
            _toastService.ShowSuccess("House Created Successfully", "");
            BackToList();
        }
    }


    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        file = e.File;
        if (file != null)
        {
            var ext = Path.GetExtension(file.Name);
            if (ext.Contains("jpg") || ext.Contains("png") || ext.Contains("jpeg"))
            {
                msFile = file.OpenReadStream();

                var resizedImageFile = await file.RequestImageFileAsync("image/png",
            100, 100);

                var buffer = new byte[resizedImageFile.Size];
                await resizedImageFile.OpenReadStream().ReadAsync(buffer);

                var imageBase64Data = Convert.ToBase64String(buffer);
                imageDataURL = string.Format("data:image/png;base64,{0}", imageBase64Data);
                isInvalidFileType = false;
            }
            else
            {
                isInvalidFileType = true;
                imageDataURL = string.Empty;
            }
        }
        else
        {
            isInvalidFileType = false;
        }
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/houses/");
    }
}
