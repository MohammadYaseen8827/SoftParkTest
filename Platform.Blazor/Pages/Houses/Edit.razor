@page "/houses/edit/{Id}" 
@inject IHouseRepository _repo
@inject NavigationManager _navManager
@inject IFileUpload _fileUpload
@inject IToastService _toastService
<h3 class="card-title">Edit House</h3>
<hr />
<br />
@if (!isSuccess)
{
    <ErrorMessage Message="Somewthing Went Wrong With the Operation" />
}

@if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
    <ErrorMessage Message="Invalid Selection. Please Try Again" />
}
else if (Model == null)
{
    <LoadingMessage Message="Loading House For Edit" />
}
else
{
    <EditForm Model="Model" OnValidSubmit="HandleUpdate">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputSelect @bind-Value="@Model.OfferType" >
          
            @foreach (var offerType in Enum.GetValues(typeof(OfferType)))
            {
            
                <option value="@offerType">@offerType</option>
            }
        </InputSelect>
        <div class="form-group">
            <label for="houseNumber">Address House Number</label>
            <InputText @bind-Value="Model.Address.HouseNumber" class="form-control" id="houseNumber" />

            <label for="postalCode">Address Postal Code</label>
            <InputText @bind-Value="Model.Address.PostalCode" class="form-control" id="postalCode" />

            <label for="street">Address Street</label>
            <InputText @bind-Value="Model.Address.Street" class="form-control" id="street" />
        </div>
        <div class="form-group">
            <label for="imageUrl">House Image </label>
            <InputFile OnChange="HandleFileSelection" />
            @if (isInvalidFileType)
            {
                <ErrorMessage Message="Please remove the invalid file type and select as new image, or leave this field blank" />
            }
            @if (!string.IsNullOrWhiteSpace(imageDataURL))
            {
                <img src="@imageDataURL" style="height:100px;width:100px" />
            }
            else if (!string.IsNullOrWhiteSpace(Model.ImageUrl))
            {
                <img src="uploads/@Model.ImageUrl" style="height:100px;width:100px" />
            }
        </div>
        <button class="btn btn-primary" type="submit">
            <span class="oi oi-pencil"></span>
            Submit Changes
        </button>
        <button @onclick="BackToList" class="btn btn-outline-secondary">
            <span class="oi oi-media-skip-backward"></span>
            Back To List
        </button>
    </EditForm>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private House Model = new House();
    private IBrowserFile file;
    private bool isInvalidFileType = false;
    private bool isFileChanged = false;
    private string imageDataURL;
    private Stream msFile;
    private bool isSuccess = true;
    protected override async Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(Id);
        Model = await _repo.Get(Endpoints.HousesEndpoint, id);
    }

    private async Task HandleUpdate()
    {
        if (!isInvalidFileType)
        {
            if (file != null)
            {
                var ext = Path.GetExtension(file.Name);
                var picId = Guid.NewGuid().ToString().Replace("-", "");
                var picName = $"{picId}{ext}";

                _fileUpload.RemoveFile(Model.ImageUrl);
                await _fileUpload.UploadFile(msFile, picName);

                Model.ImageUrl = picName;
            }
            else if (isFileChanged && file == null)
            {
                _fileUpload.RemoveFile(Model.ImageUrl);
                Model.ImageUrl = string.Empty;
            }

            isSuccess = await _repo.Update(Endpoints.HousesEndpoint, Model, Model.Id);
            if (isSuccess)
            {
                _toastService.ShowWarning("House Updated Successfully", "");
                BackToList();
            }
        }
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        file = e.File;
        isFileChanged = true;
        if (file != null)
        {
            var ext = Path.GetExtension(file.Name);
            if (ext.Contains("jpg") || ext.Contains("png") || ext.Contains("jpeg"))
            {
                msFile = file.OpenReadStream();

                var resizedImageFile = await file.RequestImageFileAsync("image/png", 100, 100);

                var buffer = new byte[resizedImageFile.Size];
                await resizedImageFile.OpenReadStream().ReadAsync(buffer);

                var imageBase64Data = Convert.ToBase64String(buffer);
                imageDataURL = string.Format("data:image/png;base64,{0}", imageBase64Data);
                isInvalidFileType = false;
            }
            else
            {
                isInvalidFileType = true;
                imageDataURL = string.Empty;
            }
        }
        else
        {
            isInvalidFileType = false;
        }
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/houses/");
    }
}
